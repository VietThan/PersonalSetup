{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Starting Point","text":"<p>You have a new computer, and there are so many thingie-ma-bobs that need to go through, here are the different things.</p> <p>Reading order semi-matters.</p>"},{"location":"#1-general-setup","title":"1. General Setup","text":"<ol> <li> Shell Setup \u2014 lots of opinions here. </li> <li> VSCode Setup \u2014 IDE of choice.</li> </ol>"},{"location":"#2-specific-os-setup","title":"2. Specific OS setup","text":"<ol> <li> Mac Setup.</li> <li> Linux Setup.</li> <li> Windows Setup</li> </ol>"},{"location":"#3-language-setup","title":"3. Language setup","text":"<p>See  Language Setup.</p>"},{"location":"browsers/chrome-setup/","title":"Chrome Setup","text":""},{"location":"browsers/firefox-setup/","title":"Firefox Setup","text":""},{"location":"browsers/safari-setup/","title":"Safari Setup","text":""},{"location":"general/shell-setup/","title":"Shell Setup","text":""},{"location":"general/shell-setup/#1-top-line","title":"1. Top Line","text":"<ol> <li> iTerm2 is terminal of choice (over the Mac default).<ol> <li>Change key mappings to Natural Text Editing to use <code>Option + &lt;arrow keys&gt;</code> to move around on the terminal.<ol> <li>Goto Settings: <code>\u2318 + ,</code> \u2192 <code>Profiles</code> \u2192 <code>Keys</code> \u2192 <code>Key Mappings</code></li> <li>Under <code>Presets..</code>, change <code>Natural Text Editing</code></li> </ol> </li> </ol> </li> <li>install  zsh for oh-my-zsh<ol> <li>Although I'm seeing more and more arguments for using  fish.</li> </ol> </li> <li>Oh-My-Zsh just to \"feel like a better programmer\" because I will be the first to admit I don't fully use all its capabilities.<ol> <li>General note: For any plugin installation, search for a oh-my-zsh specific installation.</li> <li>powerlevel10k for the theme. (including the MesloNG font).</li> <li>zsh-autosuggestions is the first plugin.</li> <li>zsh-syntax-highlighting is the second plugin.</li> </ol> </li> <li>Configurations should live in <code>~/.zshrc</code>, aliases should live in <code>~/.zprofile</code><ol> <li>This blogpost has a table in which zsh/bash users would find interesting on ordering of what gets sourced.</li> </ol> </li> </ol>"},{"location":"general/shell-setup/#2-zshrc","title":"2. <code>~/.zshrc</code>","text":"<ol> <li>History setup in <code>~/.zshrc</code> <pre><code># options for history \nsetopt EXTENDED_HISTORY INC_APPEND_HISTORY INC_APPEND_HISTORY_TIME\n\n# EXTENDED_HISTORY \u2014 Adds timestamps to each history entry. This is useful if you ever want to track when commands were executed.\n# INC_APPEND_HISTORY \u2014 Ensures that commands are written to the history file immediately after they are entered, instead of waiting until the shell session ends. This helps you retain history even if the shell crashes.\n# INC_APPEND_HISTORY_TIME \u2014 Writes timestamps alongside history entries when INC_APPEND_HISTORY is enabled, which further helps with auditing command history.\n# SHARE_HISTORY \u2014 Shares the command history across all running zsh instances. This is helpful if you work with multiple terminal windows, as all of them will have access to a unified history.\n\n# Keep more entries in memory and in .zsh_history file.\nHISTSIZE=10000\nSAVEHIST=5000\n\n# When trimming history file, keep unique commands and trim duplicates first.\nsetopt HIST_EXPIRE_DUPS_FIRST\n\n# Do not enter a command into the history if it is a duplicate of the previous event.\nsetopt HIST_IGNORE_DUPS\n</code></pre></li> </ol>"},{"location":"general/vscode-setup/","title":"VSCode Setup","text":"<ol> <li>If installed Meslo Nerd Font for powerlevel10k, need to configure fonts for VSCode.<ol> <li>Add <code>\"terminal.integrated.fontFamily\": \"MesloLGS NF\",</code> to User <code>settings.json</code> (StackOverflow)</li> </ol> </li> </ol>"},{"location":"general/vscode-setup/#install-code-command-in-path","title":"Install <code>code</code> command in PATH","text":"<p>Can one really call themselves a programmer if they can't open applications on the command line?</p> <ol> <li><code>\u2318 Cmd</code> + <code>\u21e7 Shift</code> + <code>p</code></li> <li>Search for Shell Command: Install <code>code</code> command in PATH</li> <li>Now go enjoy:</li> </ol> <pre><code>code .\n</code></pre>"},{"location":"general/vscode-setup/#extensions","title":"Extensions","text":"<ol> <li>GitLens</li> <li>autoDocstring - Python Docstring Generator</li> <li>Git Graph</li> <li>Live Server</li> <li>XML - RedHat</li> <li>Docker</li> </ol>"},{"location":"languages/","title":"Language Setup","text":"<ol> <li> Python - my strongest language at the moment.</li> </ol>"},{"location":"languages/python-setup/","title":"Python Setup","text":""},{"location":"languages/python-setup/#1-system-wide-python-with-pyenv","title":"1. System Wide Python with <code>pyenv</code>","text":"<p>If you're on Linux or Mac, there is already Python installed and you can use <code>python</code> on the command line out of the box.  However, it's usually out of date.</p> <p></p> <p>But it's not advisable to upgrade your system python because all kinds of errors might pop up. </p> Viet's Story <p>At once point, I tried to upgrade my <code>python</code> system wide on an Ubuntu machine to the latest <code>python3</code> version.</p> <p>My bash terminal died/won't start up.</p> <p>As it turns out bash was relying on <code>python</code> being symlinked to <code>python2.7</code> and I've messed up.</p> <p>Just let smarter people figure it out for you.</p> <p>Solution: Let pyenv manages system-wide python.</p> <ol> <li>(Optional) read the README.md in its entirety</li> <li>Install pyenv<ol> <li>Don't forget to go through the \"Setup shell environment for pyenv\"</li> </ol> </li> <li> <p>Install like the 2 latest version of Python3 (might need system packages). For example:    <pre><code>pyenv install 3.10 3.11\n</code></pre></p> </li> <li> <p>Usage:</p> <p>To select a Pyenv-installed Python as the version to use, run one of the following commands:</p> <ol> <li><code>pyenv shell &lt;version&gt;</code> -- select just for current shell session</li> <li><code>pyenv local &lt;version&gt;</code> -- automatically select whenever you are in the current directory (or its subdirectories)</li> <li><code>pyenv global &lt;version&gt;</code> -- select globally for your user account</li> </ol> </li> </ol>"},{"location":"languages/python-setup/#2-single-project","title":"2. Single Project","text":""},{"location":"languages/python-setup/#21-bare-no-dependency-management","title":"2.1. Bare (no dependency management)","text":"<p>At the very least use python's standard venv and a requirements.txt.</p> <p>Standard commands:</p> <pre><code>$ mkdir new_project\n$ cd new_project\n$ python3.11 -m venv venv\n</code></pre> <p>Do some coding using the venv and save the packages.</p> <pre><code>$ cd new_project\n$ venv/bin/python -m pip install requests\n$ venv/bin/python -m pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"languages/python-setup/#22-dependencies-manager","title":"2.2. Dependencies Manager","text":"<p>I am familiar with PDM and poetry.  They themselves also rely on python's standard <code>venv</code> (mentioned above).</p> Viet's Note <p>I am marginally excited about uv.</p>"},{"location":"languages/python-setup/#23-local-venv","title":"2.3. Local <code>.venv</code>","text":"<p>It is important to always have a local <code>.venv</code> per project. This is to not cross-contaminate dependencies between different projects. And also makes it easy to package your project for pypi in the future.</p> <p>If using <code>poetry</code>, enable virtualenvs.in-project to <code>true</code>:</p> <pre><code>$ cd a_poetry_project\n$ cat poetry.toml\n[virtualenvs]\nin-project = true\n</code></pre> <p>This would ensure the creation of a <code>.venv</code> managed by the dependency manager, containing the installed dependencies of the project</p> <p><code>pdm</code> creates local <code>.venv</code> out of the box.</p> <p>As such, in any project, you can expect the following structure:</p> <pre><code>.\n\u2514\u2500\u2500 my-python-project/\n    \u251c\u2500\u2500 .venv/\n    \u2502   \u251c\u2500\u2500 bin/\n    \u2502   \u2502   \u2514\u2500\u2500 python\n    \u2502   \u2514\u2500\u2500 lib/\n    \u2502       \u2514\u2500\u2500 ...\n    \u251c\u2500\u2500 src/\n    \u2502   \u2514\u2500\u2500 my_python_project/\n    \u2502       \u251c\u2500\u2500 __init__.py\n    \u2502       \u2514\u2500\u2500 main.py\n    \u251c\u2500\u2500 tests/\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u2514\u2500\u2500 test_main.py\n    \u251c\u2500\u2500 pyproject.toml\n    \u251c\u2500\u2500 README.md\n    \u2514\u2500\u2500 pdm.lock_or_poetry.lock\n</code></pre>"},{"location":"languages/python-setup/#3-monorepo-python","title":"3. Monorepo Python","text":"<p>Parent <code>VENV</code> with a <code>.helper_rc</code> (contains any bash commands you want). Each project has their own <code>.venv</code>.</p> <p>See the example in the expand:</p> Viet's Note <pre><code>.\n\u2514\u2500\u2500 Big-MonoRepo/\n    \u251c\u2500\u2500 Lib-A/\n    \u2502   \u251c\u2500\u2500 .venv/\n    \u2502   \u2502   \u251c\u2500\u2500 bin/\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 python\n    \u2502   \u2502   \u2514\u2500\u2500 lib/\n    \u2502   \u2502       \u2514\u2500\u2500 ...\n    \u2502   \u251c\u2500\u2500 src/\n    \u2502   \u2502   \u2514\u2500\u2500 lib_a/\n    \u2502   \u2502       \u251c\u2500\u2500 __init__.py\n    \u2502   \u2502       \u2514\u2500\u2500 main.py\n    \u2502   \u251c\u2500\u2500 tests/\n    \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u2502   \u2514\u2500\u2500 test_main.py\n    \u2502   \u251c\u2500\u2500 pyproject.toml\n    \u2502   \u251c\u2500\u2500 README.md\n    \u2502   \u2514\u2500\u2500 pdm.lock\n    \u251c\u2500\u2500 Service-A/\n    \u2502   \u251c\u2500\u2500 .venv/\n    \u2502   \u2502   \u251c\u2500\u2500 bin/\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 python\n    \u2502   \u2502   \u2514\u2500\u2500 lib/\n    \u2502   \u2502       \u2514\u2500\u2500 ...\n    \u2502   \u251c\u2500\u2500 src/\n    \u2502   \u2502   \u2514\u2500\u2500 service_a/\n    \u2502   \u2502       \u251c\u2500\u2500 __init__.py\n    \u2502   \u2502       \u2514\u2500\u2500 main.py\n    \u2502   \u251c\u2500\u2500 tests/\n    \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u2502   \u2514\u2500\u2500 test_main.py\n    \u2502   \u251c\u2500\u2500 pyproject.toml\n    \u2502   \u251c\u2500\u2500 README.md\n    \u2502   \u2514\u2500\u2500 pdm.lock\n    \u251c\u2500\u2500 Service-B/\n    \u2502   \u251c\u2500\u2500 .venv/\n    \u2502   \u2502   \u251c\u2500\u2500 bin/\n    \u2502   \u2502   \u2502   \u2514\u2500\u2500 python\n    \u2502   \u2502   \u2514\u2500\u2500 lib/\n    \u2502   \u2502       \u2514\u2500\u2500 ...\n    \u2502   \u251c\u2500\u2500 src/\n    \u2502   \u2502   \u2514\u2500\u2500 service_b/\n    \u2502   \u2502       \u251c\u2500\u2500 __init__.py\n    \u2502   \u2502       \u2514\u2500\u2500 main.py\n    \u2502   \u251c\u2500\u2500 tests/\n    \u2502   \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u2502   \u2514\u2500\u2500 test_main.py\n    \u2502   \u251c\u2500\u2500 pyproject.toml\n    \u2502   \u251c\u2500\u2500 README.md\n    \u2502   \u2514\u2500\u2500 pdm.lock\n    \u251c\u2500\u2500 venv/\n    \u2502   \u251c\u2500\u2500 bin/\n    \u2502   \u2502   \u2514\u2500\u2500 python\n    \u2502   \u2514\u2500\u2500 lib/\n    \u2502       \u2514\u2500\u2500 ...\n    \u251c\u2500\u2500 docs/\n    \u2502   \u2514\u2500\u2500 index.md\n    \u251c\u2500\u2500 mkdocs.yaml\n    \u251c\u2500\u2500 docker-compose.yaml\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 .pre-commit-config.yaml\n    \u2514\u2500\u2500 big-monorepo.code-workspace # vscode workspace\n</code></pre>"},{"location":"languages/python-setup/#31-packages-depend-on-local-libs","title":"3.1. Packages depend on local libs","text":"<p>In the example above, let's say Service-A and Service-B relies on Lib-A, what to do?</p> <ol> <li><code>poetry</code> calls them path dependencies. Note the <code>develop</code> attribute.</li> <li><code>pdm</code> calls them local dependencies, but then put editable dependencies in a different section.</li> </ol>"},{"location":"languages/python-setup/#32-pre-commit-in-a-monorepo","title":"3.2. <code>pre-commit</code> in a monorepo","text":"<p>Can't just use pre-commit normally because each project should have their own </p> <p>TODO</p>"},{"location":"languages/python-setup/#docs","title":"Docs","text":"<p>I like mkdocs with material.</p>"},{"location":"os/linux/","title":"Linux Setup","text":"<p>Really depends on what flavors of Linux you've got.</p> <p>TODO</p>"},{"location":"os/mac/","title":"Mac Setup","text":"<ol> <li> Homebrew is almost always the first install.</li> </ol>"},{"location":"os/mac/#history","title":"History","text":"<ol> <li>I joined AppCard in 2021 and they gave me a 2019 8GB RAM M1 Pro. I have to begrudgingly admit that a Macbook is pretty great. </li> <li>In 2023, for my birthday I gifted myself a 18GB M3 Pro.</li> <li>In early 2024, AppCard upgraded me to a 24GB M2 Air.</li> </ol>"},{"location":"os/windows/","title":"Windows Setup","text":"<p>Ha, when was the last time I had a Windows machine?</p> <p>TODO</p>"},{"location":"tools/","title":"Tools","text":"<ol> <li>AWS Setup</li> <li>Wireshark Setup</li> </ol>"},{"location":"tools/aws-setup/","title":"AWS CLI Setup","text":""},{"location":"tools/wireshark-setup/","title":"Wireshark setup","text":""}]}